---
AWSTemplateFormatVersion: "2010-09-09"
Description: Default EC2 stack for the Project CloudHealthService 

Parameters:
  ProjectName:
    Type: String
    Description: Project Name
  RegionName:
    Type: String
    Description: Region Name

Mappings:
  CidrMap:
    ap-northeast-2:
      VpcCidr: 10.1.0.0/16
    sa-east-1:
      VpcCidr: 172.17.0.0/16 
  AmiMap:
    ap-northeast-2:
      Ami: ami-07d737d4d8119ad79
    sa-east-1:
      Ami: ami-07a943af5a5ec252b

Resources:
#보안그룹 - web
  SeoulWebSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "${AWS::Region} Public Web Security Group"
      VpcId: !ImportValue VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-${RegionName}-web-sg"
#보안그룹 - seoul-sg-natweb
  SeoulNatWebSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "${AWS::Region} Nat Web Instance Security Group"
      VpcId: !ImportValue VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.1.0.0/16
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-${RegionName}-nat-web-sg"
#보안그룹 - seoul-alb-sg
  SeoulAlbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "${AWS::Region} Nat Web Instance Security Group"
      VpcId: !ImportValue VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-${RegionName}-alb-sg"

  #인스턴스 생성 app.py, template>index.html 생성
  SeoulPubWeb:
    Type: 'AWS::EC2::Instance'
    DependsOn: SeoulAlb
    Properties: 
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      KeyName: "health-key"
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref SeoulWebSg
      SubnetId: !ImportValue SeoulPubSn2Id 
      Tags:
        - Key : Name
          Value : Seoul-Pub-Web
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          python3.7 -m pip install --upgrade pip
          pip install Flask
          pip install requests==2.6
          
          mkdir -p /app
          ALB_DNS_NAME="{{!GetAtt SeoulAlb.DNSName}}"
          echo '
          from flask import Flask, jsonify, render_template
          import requests

          app = Flask(__name__)

          @app.route("/")
          def html_page():
              return render_template("index.html")

          # 다른 서버에 HTTP GET 요청을 보내는 API -> 로드밸런서 DNS주소 변경
          @app.route("/api")
          def call_external_api():
              url = "http://internal-ssouel-alb-87441315.ap-northeast-2.elb.amazonaws.com" 
              try:
                  response = requests.get(url)
                  response.raise_for_status()  
                  data = response.json()  
                  return jsonify(data) 
              except requests.exceptions.RequestException as e:
                  return jsonify(error=str(e)), 500 

          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=80, debug=True)' > /app/app.py
          nohup python3 /app/app.py &
          mkdir /app/templates
          PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
          echo '
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Fetch Data and Display Table</title>
              <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
              <style>
                  table {
                      width: 100%;
                      border-collapse: collapse;
                      margin-top: 20px;
                  }
                  th, td {
                      border: 1px solid #ddd;
                      padding: 8px;
                      text-align: left;
                  }
                  th {
                      background-color: #f2f2f2;
                  }
              </style>
          </head>
          <body>
              <h1>Data Table</h1>
              <button id="fetch-data">Fetch Data</button>
              <div id="result">
                  <!-- 테이블이 여기에 렌더링됩니다 -->
              </div>

              <script>
                  $(document).ready(function() {
                      $("#fetch-data").click(function() {
                          $.ajax({
                              url: "http://$PUBLIC_IP/api", // API 엔드포인트를 여기에 넣으세요
                              method: "GET",
                              success: function(response) {
                                  const data = response.message;
                                  if (Array.isArray(data)) {
                                      renderTable(data);
                                  } else {
                                      $("#result").html("Error: Expected an array of data.");
                                  }
                              },
                              error: function(xhr, status, error) {
                                  $("#result").html("오류: " + error);
                              }
                          });
                      });

                      function renderTable(data) {
                          if (data.length === 0) {
                              $("#result").html("No data available.");
                              return;
                          }

                          // 테이블 시작 태그
                          let table = "<table><thead><tr>";

                          // 테이블 헤더 생성
                          const headers = ["ID", "Active", "First Name", "Last Name", "Gender", "Birth Date", "Address", "City", "State", "Postal Code", "Phone", "Email", "Created At", "Updated At"];
                          headers.forEach(header => {
                              table += `<th>${header}</th>`;
                          });

                          table += "</tr></thead><tbody>";

                          // 테이블 행 데이터 추가
                          data.forEach(row => {
                              table += "<tr>";
                              row.forEach(value => {
                                  table += `<td>${value}</td>`;
                              });
                              table += "</tr>";
                          });

                          table += "</tbody></table>";

                          // 테이블 렌더링
                          $("#result").html(table);
                      }
                  });
              </script>

          </body>
          </html>' > /app/templates/index.html               

  # 프라이빗 유저데이터에 파이선 설정&플라스크 설치하는거 넣기
  SeoulPriWeb3:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref SeoulNatWebSg
      SubnetId: !ImportValue SeoulPriSn3Id 
      Tags:
        - Key : Name
          Value : Seoul-Pri-Web3
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          yum install -y gcc
          yum install postgresql-devel -y
          python3.7 -m pip install --upgrade pip
          pip install Flask
          pip install psycopg2-binary
          mkdir -p /app
          echo '
          import psycopg2

          from flask import Flask, jsonify
          app = Flask(__name__)

          @app.route("/")
          def hello_world():
              result = getDb()

              return jsonify(message=result)

          def getDb():
              # PostgreSQL 데이터베이스에 연결
              connection = psycopg2.connect(
                  host='10.1.5.19',
                  port='5432',
                  database='health',
                  user='postgres',
                  password='qwer1234'
              )
              cursor = connection.cursor()
              query = "SELECT * FROM Patient;"  # 데이터를 가져올 테이블
              cursor.execute(query)
              rows = cursor.fetchall()


              result=[]
              for row in rows:
                  print(row)
                  result.append(row)
              return result

          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=80, debug=True)' > /app/app.py
          nohup python3 /app/app.py &

  ####
  SeoulPriWeb4:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref SeoulNatWebSg
      SubnetId: !ImportValue SeoulPriSn4Id 
      Tags:
        - Key : Name
          Value : Seoul-Pri-Web4
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          yum install postgresql-devel -y
          yum install -y gcc
          python3.7 -m pip install --upgrade pip
          pip install Flask
          pip install psycopg2-binary
          mkdir -p /app
          echo '
          import psycopg2

          from flask import Flask, jsonify
          app = Flask(__name__)

          @app.route("/")
          def hello_world():
              result = getDb()

              return jsonify(message=result)

          def getDb():
              # PostgreSQL 데이터베이스에 연결
              connection = psycopg2.connect(
                  host='10.1.5.19',
                  port='5432',
                  database='health',
                  user='postgres',
                  password='qwer1234'
              )
              cursor = connection.cursor()
              query = "SELECT * FROM Patient;"  # 데이터를 가져올 테이블
              cursor.execute(query)
              rows = cursor.fetchall()

              result=[]
              for row in rows:
                  print(row)
                  result.append(row)
              return result

          if __name__ == "__main__":
              app.run(host="0.0.0.0", port=80, debug=True)' > /app/app.py
          nohup python3 /app/app.py &
  
  #DB용 인스턴스 
  SeoulPubWeb5:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      KeyName: "db-key"
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref SeoulNatWebSg
      SubnetId: !ImportValue SeoulPubSn5Id 
      Tags:
        - Key : Name
          Value : Seoul-DB
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          amazon-linux-extras install postgresql10 epel -y
          yum install postgresql-server postgresql-devel -y
          /usr/bin/postgresql-setup --initdb
          sed -i "s/^#listen_addresses = '*'/listen_addresses = '*'/g" /var/lib/pgsql/data/postgresql.conf
          sed -i "s/^host    all             all             127.0.0.1/32            ident/#host    all             all             0.0.0.0/0            md5/g" /var/lib/pgsql/data/pg_hba.conf
          systemctl restart postgresql
#Batch용
  SeoulPriWeb6:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [AmiMap, !Ref "AWS::Region", Ami]
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref SeoulNatWebSg
      SubnetId: !ImportValue SeoulPubSn5Id 
      Tags:
        - Key : Name
          Value : Seoul-DB-Bathch
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          yum install -y java-11-amazon-corretto


#ALB 생성 : pri3,4
#alb tg
  SeoulAlbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-alb-tg"
      Port: 80
      Protocol: HTTP
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue VpcId
      TargetType: instance
      Targets:
        - Id: !Ref SeoulPriWeb3
        - Id: !Ref SeoulPriWeb4
      Tags:
        - Key : Name
          Value : !Sub "${ProjectName}-alb-tg"
#alb        
  SeoulAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # internet-facing : 인터넷에 직접 노출되어 외부 트래픽을 받게 합니다.
      # Scheme: internet-facing 
      Scheme: internal
      Name: !Sub "${ProjectName}-alb"
      SecurityGroups:
        - !Ref SeoulAlbSg
      Subnets:
        - !ImportValue SeoulPriSn3Id
        - !ImportValue SeoulPriSn4Id
  SeoulAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SeoulAlbTg
      LoadBalancerArn: !Ref SeoulAlb
      Port: 80
      Protocol: HTTP

...
